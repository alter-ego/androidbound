def siteUrl = 'https://github.com/alter-ego/androidbound'
def gitUrl = 'https://github.com/alter-ego/androidbound.git'
def artifactGroup = "solutions.alterego"
def artifactName = "androidbound"
def artifactVersion = "0.7.8"
def artifactDesc = "This library offers easy view bindings for Android."
def artifactVersionCode = 38

ext.bintrayuser = System.getenv("BINTRAY_USER")
ext.bintraypwd = System.getenv("BINTRAY_PWD")

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode artifactVersionCode
        versionName artifactName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android {
        lintOptions {
            abortOnError false
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
        test.java.srcDirs += 'src/test/kotlin'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile deps.support.appcompat
    compile deps.support.compat
    compile deps.support.recyclerview

    compile deps.rx2.android
    compile deps.rx2.java

    provided deps.annotation
    compile deps.lombok

    // Testing
    testCompile deps.kotlin.stdLibJre8
    testCompile deps.kotlin.reflect
    testCompile deps.kotlin.testjunit
    testCompile deps.junit
    testCompile deps.fest
    testCompile deps.mockito
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(getProperty('aar.deployPath'))
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId artifactGroup
            artifactId artifactName
            version artifactVersion
        }
    }
}

bintray {
    user = bintrayuser
    key = bintraypwd
    dryRun = false

    publications = ['Publication']
    pkg {
        repo = "android"
        name = artifactName
        userOrg = 'alterego-solutions'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
        issueTrackerUrl = 'https://github.com/alter-ego/androidbound/issues'

        version {
            name = artifactVersion
            desc = artifactDesc
            released = new Date()
            vcsTag = artifactVersion
        }
    }
}

publishing {
    publications {
        Publication(MavenPublication) {
            artifact("$buildDir/outputs/aar/AndroidBound-release.aar")
            artifact sourcesJar
            artifact javadocJar
            groupId artifactGroup
            artifactId artifactName
            version artifactVersion
        }
    }
}

